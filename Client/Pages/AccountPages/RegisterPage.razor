@page "/identity/account/register"
@using Client.Pages.OtherPages
@using Client.Services
@inject NavigationManager Navigation
@inject SnackbarService SnackbarService
@layout AuthenticationLayout

@* <div class="min-h-screen bg-gradient-to-br from-indigo-100 to-blue-100 py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center"> *@
<div class="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-2xl">
    <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Create Account</h2>
        <p class="mt-2 text-center text-sm text-gray-600">
            Join us and get started today
        </p>
    </div>

    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="register" class="mt-8 space-y-6">
        <DataAnnotationsValidator/>

        <div class="space-y-6">
            <div>
                <label for="fullname" class="block text-sm font-medium text-gray-700">Full Name</label>
                <div class="mt-1">
                    <InputText id="fullname" @bind-Value="registerModel.Fullname"
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Enter your full name"/>
                    <ValidationMessage For="@(() => registerModel.Fullname)" class="text-red-500 text-sm mt-1"/>
                </div>
            </div>

            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email Address</label>
                <div class="mt-1">
                    <InputText id="email" @bind-Value="registerModel.Email"
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Enter your email"/>
                    <ValidationMessage For="@(() => registerModel.Email)" class="text-red-500 text-sm mt-1"/>
                </div>
            </div>

            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <div class="mt-1">
                    <InputText type="password" id="password" @bind-Value="registerModel.Password"
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Create a password"/>
                    <ValidationMessage For="@(() => registerModel.Password)" class="text-red-500 text-sm mt-1"/>
                </div>
            </div>

            <div>
                <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                <div class="mt-1">
                    <InputText type="password" id="confirmPassword" @bind-Value="registerModel.ConfirmPassword"
                               class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                               placeholder="Confirm your password"/>
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-red-500 text-sm mt-1"/>
                </div>
            </div>
        </div>

        <div>
            @if (ShowLoadingButton)
            {
                <ButtonLoadingSpinner></ButtonLoadingSpinner>
            }
            else
            {
                <button type="submit"
                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                    <span class="mr-2">Create Account</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" clip-rule="evenodd"/>
                    </svg>
                </button>
            }
        </div>

        <div class="text-center">
            <a href="/identity/account/login" class="text-sm text-indigo-600 hover:text-indigo-500">
                Already have an account? Sign in
            </a>
        </div>
    </EditForm>
</div>
@* </div> *@

@code {
    private Register registerModel = new();
    private bool ShowLoadingButton { get; set; } = false;
    
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    private async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(registerModel);
        if (result.Flag)
        {
            SnackbarService.ShowSnackbar("User registered successfully!","Success");
            Navigation.NavigateTo("/identity/account/login");
        }
        else
        {
            SnackbarService.ShowSnackbar($"Unable to register {result.Message}","Error");
        }

        ShowLoadingButton = false;
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isAuthenticated = user.Identity.IsAuthenticated;
        // if (!isAuthenticated)
        // {
        //     Navigation.NavigateTo("/identity/account/login");
        // }
    }

}